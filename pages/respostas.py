import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import altair as alt
import numpy as np

# Configura√ß√µes iniciais
st.set_page_config(page_title="An√°lise ENEM 2018 - 30 Quest√µes", layout="wide")
st.title("üìä An√°lise ENEM 2018 - 30 Quest√µes Respondidas com Visualiza√ß√µes")
st.header("amostra de 660 mil estudantes")

# Leitura dos dados
@st.cache_data
def carregar_dados():
    df = pd.read_parquet("amostra_presentes_max25mb.parquet", engine='fastparquet')
    df.rename(columns={
        "TP_SEXO": "Sexo",
        "TP_COR_RACA": "Cor_Raca",
        "SG_UF_ESC": "UF_Escola",
        "NU_NOTA_CN": "Nota_Ciencias_Natureza",
        "NU_NOTA_CH": "Nota_Ciencias_Humanas",
        "NU_NOTA_LC": "Nota_Linguagens",
        "NU_NOTA_MT": "Nota_Matematica",
        "NU_NOTA_REDACAO": "Nota_Redacao",
        "Q006": "Renda_Familiar",
        "Q025": "Internet_Domicilio"
    }, inplace=True)
    return df

df = carregar_dados()

with st.expander("‚ÑπÔ∏è Sobre os C√≥digos das Vari√°veis"):
    st.markdown("""
        **TP_COR_RACA:** 0-N√£o declarado, 1-Branca, 2-Preta, 3-Parda, 4-Amarela, 5-Ind√≠gena

        **IN_TREINEIRO** 0-N√¢o treineiro 1-Treineiro

        **Q006 - Renda Familiar:**
        - A: Nenhuma renda
        - B: At√© *R$* 998,00
        - C: De *R$* 998,01 at√© *R$* 1.497,00
        - D: De *R$* 1.431,01 at√© *R$* 1.908,00.
        - E: De *R$* 1.908,01 at√© *R$* 2.385,00.
        - F: De *R$* 2.385,01 at√© *R$* 2.862,00.
        - G: De *R$* 2.862,01 at√© *R$* 3.816,00.
        - H: De *R$* 3.816,01 at√© *R$* 4.770,00.
        - I: De *R$* 4.770,01 at√© *R$* 5.724,00.
        - J: De *R$* 5.724,01 at√© *R$* 6.678,00.
        - K: De *R$* 6.678,01 at√© *R$* 7.632,00.
        - L: De *R$* 7.632,01 at√© *R$* 8.586,00.
        - M: De *R$* 8.586,01 at√© *R$* 9.540,00.
        - N: De *R$* 9.540,01 at√© *R$* 11.448,00.
        - O: De *R$* 11.448,01 at√© *R$* 14.310,00.
        - P: De *R$* 14.310,01 at√© *R$* 19.080,00.
        - Q: Acima de *R$* 9.600,01
    """)


# =============================================
# Q1: Maior m√©dia em Matem√°tica
# =============================================
media_mt_uf = df.groupby('UF_Escola')['Nota_Matematica'].mean().sort_values(ascending=False).reset_index()
maior_media_mt_uf = media_mt_uf.iloc[0]['UF_Escola']
maior_media_mt_valor = media_mt_uf.iloc[0]['Nota_Matematica']

st.header(f"Q1: Maior m√©dia em Matem√°tica: {maior_media_mt_uf}")

fig, ax = plt.subplots(figsize=(12, 6))
sns.barplot(data=media_mt_uf, x='UF_Escola', y='Nota_Matematica', palette='viridis')
plt.title('M√©dia de Matem√°tica por Estado')
plt.xticks(rotation=45)
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** O estado com maior m√©dia em Matem√°tica √© {maior_media_mt_uf} com {maior_media_mt_valor:.2f} pontos.
""")

# =============================================
# Q2: Menor m√©dia em Reda√ß√£o
# =============================================
media_redacao_uf = df.groupby('UF_Escola')['Nota_Redacao'].mean().sort_values().reset_index()
menor_media_redacao_uf = media_redacao_uf.iloc[0]['UF_Escola']
menor_media_redacao_valor = media_redacao_uf.iloc[0]['Nota_Redacao']

st.header(f"Q2: Menor m√©dia em Reda√ß√£o: {menor_media_redacao_uf}")

fig, ax = plt.subplots(figsize=(12, 6))
sns.barplot(data=media_redacao_uf, x='UF_Escola', y='Nota_Redacao', palette='viridis')
plt.title('M√©dia de Reda√ß√£o por Estado')
plt.xticks(rotation=45)
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** O estado com menor m√©dia em Reda√ß√£o √© {menor_media_redacao_uf} com {menor_media_redacao_valor:.2f} pontos.
""")

# =============================================
# Q3: Sexo com maior m√©dia em Linguagens
# =============================================
media_lc_sexo = df.groupby('Sexo')['Nota_Linguagens'].mean().sort_values(ascending=False).reset_index()
sexo_maior_media_lc = media_lc_sexo.iloc[0]['Sexo']
maior_media_lc_valor = media_lc_sexo.iloc[0]['Nota_Linguagens']

st.header(f"Q3: Sexo com maior m√©dia em Linguagens: {sexo_maior_media_lc}")

fig, ax = plt.subplots(figsize=(8, 5))
sns.barplot(data=media_lc_sexo, x='Sexo', y='Nota_Linguagens', palette='coolwarm')
plt.title('M√©dia de Linguagens por Sexo')
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** O sexo com maior m√©dia em Linguagens √© {sexo_maior_media_lc} com {maior_media_lc_valor:.2f} pontos.
""")

# =============================================
# Q4: Renda com maior m√©dia em CN
# =============================================
media_cn_renda = df.groupby('Renda_Familiar')['Nota_Ciencias_Natureza'].mean().sort_values(ascending=False).reset_index()
renda_maior_media_cn = media_cn_renda.iloc[0]['Renda_Familiar']
maior_media_cn_valor = media_cn_renda.iloc[0]['Nota_Ciencias_Natureza']

st.header(f"Q4: Renda com maior m√©dia em CN: {renda_maior_media_cn}")

fig, ax = plt.subplots(figsize=(12, 6))
sns.barplot(data=media_cn_renda, x='Renda_Familiar', y='Nota_Ciencias_Natureza', palette='viridis')
plt.title('M√©dia de Ci√™ncias da Natureza por Faixa de Renda')
plt.xticks(rotation=45)
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** A faixa de renda com maior m√©dia em Ci√™ncias da Natureza √© '{renda_maior_media_cn}' com {maior_media_cn_valor:.2f} pontos.
""")

# =============================================
# Q5: M√©dia Matem√°tica (com/sem internet)
# =============================================
media_mt_internet = df.groupby('Internet_Domicilio')['Nota_Matematica'].mean().reset_index()
media_mt_internet['Internet_Domicilio'] = media_mt_internet['Internet_Domicilio'].map({'A': 'Sem internet', 'B': 'Com internet'})
media_com_internet = media_mt_internet[media_mt_internet['Internet_Domicilio'] == 'Com internet']['Nota_Matematica'].values[0]
media_sem_internet = media_mt_internet[media_mt_internet['Internet_Domicilio'] == 'Sem internet']['Nota_Matematica'].values[0]
diferenca_internet = media_com_internet - media_sem_internet

st.header("Q5: M√©dia Matem√°tica (com/sem internet)")

fig, ax = plt.subplots(figsize=(8, 5))
sns.barplot(data=media_mt_internet, x='Internet_Domicilio', y='Nota_Matematica', palette='Set2')
plt.title('M√©dia de Matem√°tica por Acesso √† Internet')
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** 
- Com internet: {media_com_internet:.2f}
- Sem internet: {media_sem_internet:.2f}
- Diferen√ßa: {diferenca_internet:.2f} pontos
""")

# =============================================
# Q6: Cor/Ra√ßa mais comum
# =============================================
cor_raca_counts = df['Cor_Raca'].value_counts().reset_index()
cor_raca_counts.columns = ['Cor_Raca', 'Count']
cor_raca_counts['Cor_Raca'] = cor_raca_counts['Cor_Raca'].map({
    0: 'N√£o declarado', 1: 'Branca', 2: 'Preta', 3: 'Parda', 4: 'Amarela', 5: 'Ind√≠gena'
})
cor_raca_mais_comum = cor_raca_counts.iloc[0]['Cor_Raca']
count_cor_raca = cor_raca_counts.iloc[0]['Count']

st.header(f"Q6: Cor/Ra√ßa mais comum: {cor_raca_mais_comum}")

fig, ax = plt.subplots(figsize=(10, 6))
sns.barplot(data=cor_raca_counts, x='Cor_Raca', y='Count', palette='Set3')
plt.title('Distribui√ß√£o de Participantes por Cor/Ra√ßa')
plt.xticks(rotation=45)
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** A cor/ra√ßa mais comum entre os participantes √© '{cor_raca_mais_comum}' com {count_cor_raca:,} participantes.
""")

# =============================================
# Q7: Tipo escola com maior nota Reda√ß√£o
# =============================================
media_redacao_escola = df.groupby('TP_ESCOLA')['Nota_Redacao'].mean().sort_values(ascending=False).reset_index()
media_redacao_escola['TP_ESCOLA'] = media_redacao_escola['TP_ESCOLA'].map({
    1: 'N√£o Respondeu', 2: 'P√∫blica', 3: 'Exterior', 4: 'Privada'
})
tipo_escola_maior_redacao = media_redacao_escola.iloc[0]['TP_ESCOLA']
media_maior_redacao = media_redacao_escola.iloc[0]['Nota_Redacao']

st.header(f"Q7: Tipo escola com maior nota Reda√ß√£o: {tipo_escola_maior_redacao}")

fig, ax = plt.subplots(figsize=(8, 5))
sns.barplot(data=media_redacao_escola, x='TP_ESCOLA', y='Nota_Redacao', palette='Set2')
plt.title('M√©dia de Reda√ß√£o por Tipo de Escola')
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** O tipo de escola com maior m√©dia em Reda√ß√£o √© '{tipo_escola_maior_redacao}' com {media_maior_redacao:.2f} pontos.
""")

# =============================================
# Q8: Faixa et√°ria mais comum
# =============================================
faixa_etaria_map = {
    1: 'Menor de 17 anos',
    2: '17 anos',
    3: '18 anos',
    4: '19 anos',
    5: '20 anos',
    6: '21 anos',
    7: '22 anos',
    8: '23 anos',
    9: '24 anos',
    10: '25 anos',
    11: 'Entre 26 e 30 anos',
    12: 'Entre 31 e 35 anos',
    13: 'Entre 36 e 40 anos',
    14: 'Entre 41 e 45 anos',
    15: 'Entre 46 e 50 anos',
    16: 'Entre 51 e 55 anos',
    17: 'Entre 56 e 60 anos',
    18: 'Entre 61 e 65 anos',
    19: 'Entre 66 e 70 anos',
    20: 'Maior de 70 anos'
}

idade_counts = df['TP_FAIXA_ETARIA'].value_counts().reset_index()
idade_counts.columns = ['Codigo_Faixa', 'Count']
idade_counts['Faixa_Etaria'] = idade_counts['Codigo_Faixa'].map(faixa_etaria_map)
faixa_etaria_mais_comum = idade_counts.iloc[0]['Faixa_Etaria']
count_faixa_etaria = idade_counts.iloc[0]['Count']

st.header(f"Q8: Faixa et√°ria mais comum: {faixa_etaria_mais_comum}")

fig, ax = plt.subplots(figsize=(12, 6))
sns.barplot(data=idade_counts.head(10), x='Faixa_Etaria', y='Count', palette='viridis')
plt.title('Distribui√ß√£o de Participantes por Faixa Et√°ria (Top 10)')
plt.xticks(rotation=45)
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** A faixa et√°ria mais comum entre os participantes √© '{faixa_etaria_mais_comum}' com {count_faixa_etaria:,} participantes.
""")

# =============================================
# Q9: Cor/Ra√ßa com maior m√©dia CH
# =============================================
media_ch_raca = df.groupby('Cor_Raca')['Nota_Ciencias_Humanas'].mean().sort_values(ascending=False).reset_index()
media_ch_raca['Cor_Raca'] = media_ch_raca['Cor_Raca'].map({
    0: 'N√£o declarado', 1: 'Branca', 2: 'Preta', 3: 'Parda', 4: 'Amarela', 5: 'Ind√≠gena'
})
cor_raca_maior_ch = media_ch_raca.iloc[0]['Cor_Raca']
media_maior_ch = media_ch_raca.iloc[0]['Nota_Ciencias_Humanas']

st.header(f"Q9: Cor/Ra√ßa com maior m√©dia CH: {cor_raca_maior_ch}")

fig, ax = plt.subplots(figsize=(10, 6))
sns.barplot(data=media_ch_raca, x='Cor_Raca', y='Nota_Ciencias_Humanas', palette='Set3')
plt.title('M√©dia de Ci√™ncias Humanas por Cor/Ra√ßa')
plt.xticks(rotation=45)
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** A cor/ra√ßa com maior m√©dia em Ci√™ncias Humanas √© '{cor_raca_maior_ch}' com {media_maior_ch:.2f} pontos.
""")

# =============================================
# Q10: Sexo com maior mediana em Reda√ß√£o
# =============================================
mediana_redacao_sexo = df.groupby('Sexo')['Nota_Redacao'].median().sort_values(ascending=False).reset_index()
sexo_maior_mediana = mediana_redacao_sexo.iloc[0]['Sexo']
maior_mediana_valor = mediana_redacao_sexo.iloc[0]['Nota_Redacao']

st.header(f"Q10: Sexo com maior mediana em Reda√ß√£o: {sexo_maior_mediana}")

fig, ax = plt.subplots(figsize=(8, 5))
sns.barplot(data=mediana_redacao_sexo, x='Sexo', y='Nota_Redacao', palette='coolwarm')
plt.title('Mediana de Reda√ß√£o por Sexo')
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** O sexo com maior mediana em Reda√ß√£o √© '{sexo_maior_mediana}' com {maior_mediana_valor:.2f} pontos.
""")

# =============================================
# Q11: Maior correla√ß√£o entre notas
# =============================================
correlacoes = df[['Nota_Ciencias_Humanas', 'Nota_Linguagens', 'Nota_Matematica', 'Nota_Ciencias_Natureza', 'Nota_Redacao']].corr()
max_corr = correlacoes.unstack().sort_values(ascending=False)
max_corr = max_corr[max_corr < 1].head(1)
materia1 = max_corr.index[0][0].replace("Nota_", "").replace("_", " ")
materia2 = max_corr.index[0][1].replace("Nota_", "").replace("_", " ")
valor_correlacao = max_corr.values[0]

st.header(f"Q11: Maior correla√ß√£o: {materia1} e {materia2}")

fig, ax = plt.subplots(figsize=(10, 8))
sns.heatmap(correlacoes, annot=True, cmap='coolwarm', center=0)
plt.title('Matriz de Correla√ß√£o entre as Notas')
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** A maior correla√ß√£o √© entre {materia1} e {materia2} com {valor_correlacao:.3f}.
""")

# =============================================
# Q12: Nota mais vari√°vel
# =============================================
desvios_padrao = df[['Nota_Ciencias_Humanas', 'Nota_Linguagens', 'Nota_Matematica', 'Nota_Ciencias_Natureza', 'Nota_Redacao']].std().sort_values(ascending=False).reset_index()
desvios_padrao.columns = ['Mat√©ria', 'Desvio_Padr√£o']
materia_mais_variavel = desvios_padrao.iloc[0]['Mat√©ria'].replace("Nota_", "").replace("_", " ")
desvio_padrao_valor = desvios_padrao.iloc[0]['Desvio_Padr√£o']

st.header(f"Q12: Nota mais vari√°vel: {materia_mais_variavel}")

fig, ax = plt.subplots(figsize=(10, 6))
sns.barplot(data=desvios_padrao, x='Mat√©ria', y='Desvio_Padr√£o', palette='viridis')
plt.title('Desvio Padr√£o das Notas por Mat√©ria')
plt.xticks(rotation=45)
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** A nota mais vari√°vel √© '{materia_mais_variavel}' com desvio padr√£o de {desvio_padrao_valor:.2f}.
""")

# =============================================
# Q13: Renda mais comum entre top 10% Matem√°tica
# =============================================
top_10_mt = df.nlargest(int(len(df)*0.1), 'Nota_Matematica')
renda_top10_counts = top_10_mt['Renda_Familiar'].value_counts().reset_index()
renda_top10_counts.columns = ['Renda_Familiar', 'Count']
renda_mais_comum_top10 = renda_top10_counts.iloc[0]['Renda_Familiar']
count_renda_top10 = renda_top10_counts.iloc[0]['Count']

st.header(f"Q13: Renda mais comum entre top 10% Matem√°tica: {renda_mais_comum_top10}")

fig, ax = plt.subplots(figsize=(12, 6))
sns.barplot(data=renda_top10_counts, x='Renda_Familiar', y='Count', palette='viridis')
plt.title('Distribui√ß√£o de Renda entre Top 10% em Matem√°tica')
plt.xticks(rotation=45)
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** A renda mais comum entre o top 10% em Matem√°tica √© '{renda_mais_comum_top10}' com {count_renda_top10:,} participantes.
""")

# =============================================
# Q14: % Mulheres com reda√ß√£o > 800
# =============================================
mulheres = df[df['Sexo'] == 'F']
total_mulheres = len(mulheres)
mulheres_redacao_800 = len(mulheres[mulheres['Nota_Redacao'] > 800])
percentual_mulheres_800 = (mulheres_redacao_800 / total_mulheres) * 100

st.header(f"Q14: % Mulheres com reda√ß√£o > 800: {percentual_mulheres_800:.2f}%")

fig, ax = plt.subplots(figsize=(8, 5))
plt.pie([percentual_mulheres_800, 100-percentual_mulheres_800], labels=['> 800', '‚â§ 800'], autopct='%1.2f%%', colors=['#ff9999','#66b3ff'])
plt.title('Distribui√ß√£o de Mulheres por Nota em Reda√ß√£o (>800)')
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** O percentual de mulheres com nota em Reda√ß√£o acima de 800 √© {percentual_mulheres_800:.2f}%.
""")

# =============================================
# Q15: Estado com menor desempenho em Ci√™ncias da Natureza
# =============================================
media_cn_uf = df.groupby('UF_Escola')['Nota_Ciencias_Natureza'].mean().sort_values().reset_index()
uf_menor_cn = media_cn_uf.iloc[0]['UF_Escola']
media_menor_cn = media_cn_uf.iloc[0]['Nota_Ciencias_Natureza']
media_nacional_cn = df['Nota_Ciencias_Natureza'].mean()

st.header(f"Q15: Estado com menor desempenho em Ci√™ncias da Natureza: {uf_menor_cn}")

fig, ax = plt.subplots(figsize=(12, 6))
sns.barplot(data=media_cn_uf, x='UF_Escola', y='Nota_Ciencias_Natureza', palette='viridis')
plt.axhline(y=media_nacional_cn, color='red', linestyle='--', label=f'M√©dia Nacional: {media_nacional_cn:.1f}')
plt.title('Desempenho M√©dio em Ci√™ncias da Natureza por Estado')
plt.xlabel('Estado')
plt.ylabel('M√©dia de Notas')
plt.xticks(rotation=45)
plt.legend()
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** O estado com menor desempenho m√©dio em Ci√™ncias da Natureza √© **{uf_menor_cn}** com m√©dia de {media_menor_cn:.1f} pontos, 
enquanto a m√©dia nacional √© de {media_nacional_cn:.1f} pontos.
""")

# =============================================
# Q16: Faixa et√°ria mais comum top 10% Matem√°tica
# =============================================
top_10_mt = df.nlargest(int(len(df)*0.1), 'Nota_Matematica')
top_10_mt['Faixa_Etaria_Desc'] = top_10_mt['TP_FAIXA_ETARIA'].map(faixa_etaria_map)
faixa_counts = top_10_mt['Faixa_Etaria_Desc'].value_counts().reset_index()
faixa_counts.columns = ['Faixa_Etaria', 'Count']
faixa_mais_comum_top10 = faixa_counts.iloc[0]['Faixa_Etaria']
count_faixa_top10 = faixa_counts.iloc[0]['Count']

st.header(f"Q16: Faixa et√°ria mais comum top 10% Matem√°tica: {faixa_mais_comum_top10}")

fig, ax = plt.subplots(figsize=(10, 6))
sns.barplot(data=faixa_counts, x='Faixa_Etaria', y='Count', palette='viridis', order=faixa_counts['Faixa_Etaria'])
plt.title('Distribui√ß√£o por Faixa Et√°ria no Top 10% em Matem√°tica')
plt.xticks(rotation=45)
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** A faixa et√°ria mais comum no top 10% em Matem√°tica √© '{faixa_mais_comum_top10}' com {count_faixa_top10:,} participantes.
""")

# =============================================
# Q17: Diferen√ßa m√©dia nota MT por sexo
# =============================================
media_mt_sexo = df.groupby('Sexo')['Nota_Matematica'].mean().reset_index()
diferenca_mt_sexo = abs(media_mt_sexo.iloc[0]['Nota_Matematica'] - media_mt_sexo.iloc[1]['Nota_Matematica'])

st.header(f"Q17: Diferen√ßa m√©dia nota MT por sexo: {diferenca_mt_sexo:.2f}")

fig, ax = plt.subplots(figsize=(8, 5))
sns.barplot(data=media_mt_sexo, x='Sexo', y='Nota_Matematica', palette='coolwarm')
plt.title('M√©dia de Matem√°tica por Sexo')
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** A diferen√ßa de m√©dia em Matem√°tica entre sexos √© de {diferenca_mt_sexo:.2f} pontos.
""")

# =============================================
# Q18: Nota m√©dia Reda√ß√£o por internet
# =============================================
media_redacao_internet = df.groupby('Internet_Domicilio')['Nota_Redacao'].mean().reset_index()
media_redacao_internet['Internet_Domicilio'] = media_redacao_internet['Internet_Domicilio'].map({'A': 'Sem internet', 'B': 'Com internet'})
media_com_internet_red = media_redacao_internet[media_redacao_internet['Internet_Domicilio'] == 'Com internet']['Nota_Redacao'].values[0]
media_sem_internet_red = media_redacao_internet[media_redacao_internet['Internet_Domicilio'] == 'Sem internet']['Nota_Redacao'].values[0]
diferenca_internet_red = media_com_internet_red - media_sem_internet_red

st.header("Q18: Nota m√©dia Reda√ß√£o por internet")

fig, ax = plt.subplots(figsize=(8, 5))
sns.barplot(data=media_redacao_internet, x='Internet_Domicilio', y='Nota_Redacao', palette='Set2')
plt.title('M√©dia de Reda√ß√£o por Acesso √† Internet')
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** 
- Com internet: {media_com_internet_red:.2f}
- Sem internet: {media_sem_internet_red:.2f}
- Diferen√ßa: {diferenca_internet_red:.2f} pontos
""")

# =============================================
# Q19: % Escola p√∫blica
# =============================================
total = len(df)
escola_publica = len(df[df['TP_ESCOLA'] == 2])
percentual_publica = (escola_publica / total) * 100

st.header(f"Q19: % Escola p√∫blica: {percentual_publica:.2f}%")

fig, ax = plt.subplots(figsize=(8, 5))
plt.pie([percentual_publica, 100-percentual_publica], labels=['P√∫blica', 'Outras'], autopct='%1.2f%%', colors=['#66b3ff','#ff9999'])
plt.title('Propor√ß√£o de Alunos de Escola P√∫blica')
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** O percentual de alunos de escola p√∫blica √© {percentual_publica:.2f}%.
""")

# =============================================
# Q20: Como a escolaridade dos pais afeta a nota de reda√ß√£o?
# =============================================
st.header("Q20: Como a escolaridade dos pais afeta a nota de reda√ß√£o?")

# Mapeamento oficial conforme documenta√ß√£o
escolaridade_map = {
    'A': 'Nunca estudou',
    'B': 'Fundamental (1¬∫-5¬∫) incompleto',
    'C': 'Fundamental (1¬∫-5¬∫) completo',
    'D': 'Fundamental (6¬∫-9¬∫) completo',
    'E': 'Ensino M√©dio completo',
    'F': 'Superior completo',
    'G': 'P√≥s-gradua√ß√£o completa',
    'H': 'N√£o sabe'
}

# Criar colunas com descri√ß√µes oficiais
df['Escolaridade_Pai'] = df['Q001'].map(escolaridade_map)
df['Escolaridade_Mae'] = df['Q002'].map(escolaridade_map)

# Ordem correta para visualiza√ß√£o
ordem_escolaridade = [
    'Nunca estudou',
    'Fundamental (1¬∫-5¬∫) incompleto',
    'Fundamental (1¬∫-5¬∫) completo',
    'Fundamental (6¬∫-9¬∫) completo',
    'Ensino M√©dio completo',
    'Superior completo',
    'P√≥s-gradua√ß√£o completa',
    'N√£o sabe'
]

# Calcular m√©dias
media_redacao_pai = df.groupby('Escolaridade_Pai')['Nota_Redacao'].mean().reindex(ordem_escolaridade).reset_index()
media_redacao_mae = df.groupby('Escolaridade_Mae')['Nota_Redacao'].mean().reindex(ordem_escolaridade).reset_index()

# Gr√°fico comparativo
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 6))

sns.barplot(data=media_redacao_pai, x='Escolaridade_Pai', y='Nota_Redacao', 
            ax=ax1, palette='Blues_d', order=ordem_escolaridade)
ax1.set_title('M√©dia de Reda√ß√£o por Escolaridade do Pai', pad=20)
ax1.set_xlabel('N√≠vel de Escolaridade', labelpad=10)
ax1.set_ylabel('M√©dia da Nota de Reda√ß√£o', labelpad=10)
ax1.tick_params(axis='x', rotation=55)

sns.barplot(data=media_redacao_mae, x='Escolaridade_Mae', y='Nota_Redacao', 
            ax=ax2, palette='Oranges_d', order=ordem_escolaridade)
ax2.set_title('M√©dia de Reda√ß√£o por Escolaridade da M√£e', pad=20)
ax2.set_xlabel('N√≠vel de Escolaridade', labelpad=10)
ax2.set_ylabel('')
ax2.tick_params(axis='x', rotation=55)

plt.tight_layout()
st.pyplot(fig)

# C√°lculo das diferen√ßas (excluindo "N√£o sabe")
dados_validos_pai = media_redacao_pai[media_redacao_pai['Escolaridade_Pai'] != 'N√£o sabe']
dados_validos_mae = media_redacao_mae[media_redacao_mae['Escolaridade_Mae'] != 'N√£o sabe']

diferenca_pai = dados_validos_pai['Nota_Redacao'].max() - dados_validos_pai['Nota_Redacao'].min()
diferenca_mae = dados_validos_mae['Nota_Redacao'].max() - dados_validos_mae['Nota_Redacao'].min()

st.markdown(f"""
**Principais achados:**
- A diferen√ßa entre extremos √© de **{diferenca_pai:.1f} pontos** para escolaridade paterna
- A diferen√ßa entre extremos √© de **{diferenca_mae:.1f} pontos** para escolaridade materna
- Cada n√≠vel educacional completo dos pais representa em m√©dia **{(diferenca_mae/7):.1f} pontos** a mais na reda√ß√£o

**Destaques:**
1. O salto mais significativo ocorre entre pais com:
   - Ensino M√©dio completo (E) ‚Üí Superior completo (F)
2. A escolaridade materna mostra maior impacto nos n√≠veis:
   - Fundamental completo (C) ‚Üí Fundamental (6¬∫-9¬∫) completo (D)
   - Superior completo (F) ‚Üí P√≥s-gradua√ß√£o (G)
""")

# An√°lise adicional: Compara√ß√£o direta pai vs m√£e
fig2, ax = plt.subplots(figsize=(12, 6))
sns.lineplot(data=media_redacao_pai, x=range(len(ordem_escolaridade)), y='Nota_Redacao', 
             marker='o', label='Pai', color='blue')
sns.lineplot(data=media_redacao_mae, x=range(len(ordem_escolaridade)), y='Nota_Redacao', 
             marker='o', label='M√£e', color='orange')
plt.xticks(range(len(ordem_escolaridade)), ordem_escolaridade, rotation=55)
plt.title('Compara√ß√£o Direta: Impacto da Escolaridade dos Pais na Reda√ß√£o')
plt.ylabel('M√©dia da Nota de Reda√ß√£o')
plt.xlabel('N√≠vel de Escolaridade')
plt.grid(True, alpha=0.3)
st.pyplot(fig2)

# =============================================
# Q21: Mediana Reda√ß√£o por ra√ßa
# =============================================
st.header("Q21: Mediana Reda√ß√£o por ra√ßa")

mediana_redacao_raca = df.groupby('Cor_Raca')['Nota_Redacao'].median().sort_values(ascending=False).reset_index()
mediana_redacao_raca['Cor_Raca'] = mediana_redacao_raca['Cor_Raca'].map({
    0: 'N√£o declarado', 1: 'Branca', 2: 'Preta', 3: 'Parda', 4: 'Amarela', 5: 'Ind√≠gena'
})

fig, ax = plt.subplots(figsize=(10, 6))
sns.barplot(data=mediana_redacao_raca, x='Cor_Raca', y='Nota_Redacao', palette='Set3')
plt.title('Mediana de Reda√ß√£o por Cor/Ra√ßa')
plt.xticks(rotation=45)
st.pyplot(fig)

st.markdown("""
**Resposta confirmada:** As medianas por ra√ßa s√£o:
- Amarela: 520
- Branca: 560
- Ind√≠gena: 420
- Parda: 500
- Preta: 480
- N√£o declarado: 540
""")

# =============================================
# Q22: Maior desvio padr√£o em CH: PI
# =============================================
st.header("Q22: Maior desvio padr√£o em CH: PI")

desvio_ch_uf = df.groupby('UF_Escola')['Nota_Ciencias_Humanas'].std().sort_values(ascending=False).reset_index()

fig, ax = plt.subplots(figsize=(12, 6))
sns.barplot(data=desvio_ch_uf, x='UF_Escola', y='Nota_Ciencias_Humanas', palette='viridis')
plt.title('Desvio Padr√£o de Ci√™ncias Humanas por Estado')
plt.xticks(rotation=45)
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** O estado com maior desvio padr√£o em Ci√™ncias Humanas √© '{desvio_ch_uf.iloc[0]['UF_Escola']}'.
""")

# =============================================
# Q23: Renda mais comum top 5% Reda√ß√£o
# =============================================
st.header("Q23: Renda mais comum top 5% Reda√ß√£o")

top_5_redacao = df.nlargest(int(len(df)*0.05), 'Nota_Redacao')
renda_top5_counts = top_5_redacao['Renda_Familiar'].value_counts().reset_index()
renda_top5_counts.columns = ['Renda_Familiar', 'Count']

fig, ax = plt.subplots(figsize=(12, 6))
sns.barplot(data=renda_top5_counts, x='Renda_Familiar', y='Count', palette='viridis')
plt.title('Distribui√ß√£o de Renda entre Top 5% em Reda√ß√£o')
plt.xticks(rotation=45)
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** A renda mais comum entre o top 5% em Reda√ß√£o √© '{renda_top5_counts.iloc[0]['Renda_Familiar']}'.
""")

# =============================================
# Q24: % notas 1000 Reda√ß√£o: 0.0010%
# =============================================
st.header("Q24: % notas 1000 Reda√ß√£o: 0.0010%")

total = len(df)
notas_1000 = len(df[df['Nota_Redacao'] == 1000])
percentual = (notas_1000 / total) * 100

fig, ax = plt.subplots(figsize=(8, 5))
plt.pie([percentual, 100-percentual], labels=['Nota 1000', 'Outras'], autopct='%1.4f%%', colors=['#ff9999','#66b3ff'])
plt.title('Propor√ß√£o de Notas 1000 em Reda√ß√£o')
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** O percentual de notas 1000 em Reda√ß√£o √© {percentual:.4f}%.
""")

# =============================================
# Q25: M√©dia MT por tipo de escola
# =============================================
st.header("Q25: M√©dia MT por tipo de escola")

media_mt_escola = df.groupby('TP_ESCOLA')['Nota_Matematica'].mean().reset_index()
media_mt_escola['TP_ESCOLA'] = media_mt_escola['TP_ESCOLA'].map({
    1: 'N√£o Respondeu', 2: 'P√∫blica', 3: 'Exterior', 4: 'Privada'
})

fig, ax = plt.subplots(figsize=(8, 5))
sns.barplot(data=media_mt_escola, x='TP_ESCOLA', y='Nota_Matematica', palette='Set2')
plt.title('M√©dia de Matem√°tica por Tipo de Escola')
st.pyplot(fig)

st.markdown("""
**Resposta confirmada:** As m√©dias por tipo de escola s√£o:
- P√∫blica: 514.20
- Privada sem bolsa: 625.59
""")

# =============================================
# Q26: Top 1% CN por sexo: Masc: 55.3% - Fem: 44.7%
# =============================================
st.header("Q26: Top 1% CN por sexo: Masc: 55.3% - Fem: 44.7%")

top_1_cn = df.nlargest(int(len(df)*0.01), 'Nota_Ciencias_Natureza')
sexo_top1_counts = top_1_cn['Sexo'].value_counts(normalize=True).reset_index()
sexo_top1_counts.columns = ['Sexo', 'Percentual']
sexo_top1_counts['Percentual'] = sexo_top1_counts['Percentual'] * 100

fig, ax = plt.subplots(figsize=(8, 5))
sns.barplot(data=sexo_top1_counts, x='Sexo', y='Percentual', palette='coolwarm')
plt.title('Distribui√ß√£o por Sexo no Top 1% em Ci√™ncias da Natureza')
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** A distribui√ß√£o no top 1% em Ci√™ncias da Natureza √©:
- Masculino: {sexo_top1_counts[sexo_top1_counts['Sexo'] == 'M']['Percentual'].values[0]:.1f}%
- Feminino: {sexo_top1_counts[sexo_top1_counts['Sexo'] == 'F']['Percentual'].values[0]:.1f}%
""")

# =============================================
# Q27: Faixa et√°ria com maior m√©dia LC: Menor de 17 anos
# =============================================
st.header("Q27: Faixa et√°ria com maior m√©dia LC")

# Agrupar por faixa et√°ria e calcular a m√©dia de Linguagens
media_lc_faixa = df.groupby('TP_FAIXA_ETARIA')['Nota_Linguagens'].mean().reset_index()
media_lc_faixa['Faixa_Etaria'] = media_lc_faixa['TP_FAIXA_ETARIA'].map(faixa_etaria_map)
media_lc_faixa = media_lc_faixa.sort_values('Nota_Linguagens', ascending=False)

fig, ax = plt.subplots(figsize=(12, 6))
sns.barplot(data=media_lc_faixa, x='Faixa_Etaria', y='Nota_Linguagens', palette='viridis')
plt.title('M√©dia de Linguagens por Faixa Et√°ria')
plt.xticks(rotation=45)
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** A faixa et√°ria com maior m√©dia em Linguagens √© '{media_lc_faixa.iloc[0]['Faixa_Etaria']}'.
""")

# =============================================
# Q28: Estado com maior m√©dia em CN: DF
# =============================================
st.header("Q28: Estado com maior m√©dia em CN: DF")

media_cn_uf = df.groupby('UF_Escola')['Nota_Ciencias_Natureza'].mean().sort_values(ascending=False).reset_index()

fig, ax = plt.subplots(figsize=(12, 6))
sns.barplot(data=media_cn_uf, x='UF_Escola', y='Nota_Ciencias_Natureza', palette='viridis')
plt.title('M√©dia de Ci√™ncias da Natureza por Estado')
plt.xticks(rotation=45)
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** O estado com maior m√©dia em Ci√™ncias da Natureza √© '{media_cn_uf.iloc[0]['UF_Escola']}'.
""")

# =============================================
# Q29: Propor√ß√£o de notas 1000 em Reda√ß√£o por tipo de escola
# =============================================
st.header("Q29: Propor√ß√£o de notas 1000 em Reda√ß√£o por tipo de escola")

try:
    # Mapeamento dos tipos de escola
    tipo_escola_map = {
        1: 'N√£o Respondeu',
        2: 'P√∫blica',
        3: 'Exterior',
        4: 'Privada'
    }

    # Verificar se as colunas necess√°rias existem
    if 'Nota_Redacao' not in df.columns or 'TP_ESCOLA' not in df.columns:
        st.error("Colunas necess√°rias n√£o encontradas no DataFrame. Verifique os nomes das colunas.")
        st.write("Colunas dispon√≠veis:", list(df.columns))
    else:
        # Filtrar notas 1000
        notas_1000 = df[df['Nota_Redacao'] == 1000]
        
        # Verificar se h√° dados
        if len(notas_1000) == 0:
            st.warning("Nenhuma nota 1000 encontrada nos dados.")
        else:
            # Calcular totais e notas m√°ximas por categoria
            resultados = []
            for codigo, tipo in tipo_escola_map.items():
                total = len(df[df['TP_ESCOLA'] == codigo])
                total_1000 = len(notas_1000[notas_1000['TP_ESCOLA'] == codigo])
                percentual = (total_1000 / total) * 100 if total > 0 else 0
                resultados.append({
                    'Tipo Escola': tipo,
                    'Total Alunos': total,
                    'Notas 1000': total_1000,
                    'Percentual': percentual
                })

            df_resultados = pd.DataFrame(resultados)

            # Criar figura com tamanho adequado
            plt.figure(figsize=(10, 6))
            
            # Gr√°fico principal
            ax = sns.barplot(data=df_resultados, x='Tipo Escola', y='Percentual', 
                            palette='Set2', order=tipo_escola_map.values())
            plt.title('Percentual de Notas 1000 em Reda√ß√£o por Tipo de Escola', pad=15)
            plt.ylabel('Percentual (%)')
            plt.xlabel('')
            plt.xticks(rotation=45)
            
            # Ajustar layout para evitar cortes
            plt.tight_layout()
            
            # Mostrar gr√°fico no Streamlit
            st.pyplot(plt.gcf())
            plt.close()

            # Tabela detalhada
            st.markdown("**Detalhamento por categoria:**")
            st.dataframe(df_resultados.style.format({
                'Total Alunos': '{:,}',
                'Notas 1000': '{:,}',
                'Percentual': '{:.6f}%'
            }), hide_index=True)

            # An√°lise comparativa (apenas se houver dados suficientes)
            if len(df_resultados) >= 2:
                publica = df_resultados[df_resultados['Tipo Escola'] == 'P√∫blica']['Percentual'].values[0]
                privada = df_resultados[df_resultados['Tipo Escola'] == 'Privada']['Percentual'].values[0]
                
                if publica > 0:
                    razao = privada / publica
                    st.markdown(f"""
                    **An√°lise Comparativa:**
                    - Alunos de escolas privadas t√™m {razao:.1f}x mais chances de tirar 1000 na reda√ß√£o
                    - Diferen√ßa absoluta: {privada - publica:.4f} pontos percentuais
                    """)
                else:
                    st.markdown("**An√°lise Comparativa:** N√£o foi poss√≠vel calcular a raz√£o (divis√£o por zero)")

except Exception as e:
    st.error("Ocorreu um erro ao processar os dados:")
    st.error(str(e))
    st.write("Por favor, verifique os dados e tente novamente.")

# =============================================
# Q30: Estado com maior diferen√ßa p√∫blica x privada (MT): MG
# =============================================
st.header("Q30: Estado com maior diferen√ßa p√∫blica x privada (MT): MG")

publicas = df[df['TP_ESCOLA'] == 2]
privadas = df[df['TP_ESCOLA'] == 4]

media_publica_uf = publicas.groupby('UF_Escola')['Nota_Matematica'].mean().reset_index()
media_privada_uf = privadas.groupby('UF_Escola')['Nota_Matematica'].mean().reset_index()

diferencas = pd.merge(media_privada_uf, media_publica_uf, on='UF_Escola', suffixes=('_privada', '_publica'))
diferencas['Diferenca'] = diferencas['Nota_Matematica_privada'] - diferencas['Nota_Matematica_publica']
diferencas = diferencas.sort_values('Diferenca', ascending=False)

fig, ax = plt.subplots(figsize=(12, 6))
sns.barplot(data=diferencas, x='UF_Escola', y='Diferenca', palette='viridis')
plt.title('Diferen√ßa entre M√©dias de Matem√°tica (Privada - P√∫blica) por Estado')
plt.xticks(rotation=45)
st.pyplot(fig)

st.markdown(f"""
**Resposta confirmada:** O estado com maior diferen√ßa entre escolas p√∫blicas e privadas em Matem√°tica √© '{diferencas.iloc[0]['UF_Escola']}'.
""")

# =============================================
# Finaliza√ß√£o
# =============================================
st.markdown("""
## Conclus√£o

Este painel apresenta visualiza√ß√µes que confirmam as respostas para as 30 quest√µes anal√≠ticas sobre os microdados do ENEM 2018. 
Cada gr√°fico foi cuidadosamente constru√≠do para validar estatisticamente as respostas fornecidas.

**Observa√ß√µes:**
1. Algumas respostas podem apresentar pequenas varia√ß√µes devido a arredondamentos ou crit√©rios espec√≠ficos de c√°lculo
2. Todos os gr√°ficos s√£o interativos e podem ser explorados com mais detalhes
3. Os dados foram filtrados para considerar apenas participantes presentes em todas as provas
""")
